package BLC;

public class Customer {
	
public static String getCustomerDetails(int Costid ,String Costname,double Costbill) {
	 
	 return "[ Id is : "+Costid+", Name is :"+Costname+", Bill is :"+Costbill+"]";
	
}
}
==================================================================================================================
package ELC;

import BLC.Customer;
import java.util.Scanner;

public class Test {


public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	System.out.print("enter customer id : ");
	System.out.flush(); 
	int id = sc.nextInt();
	
	sc.nextLine();
	System.out.print("enter customer name : ");
	String name = sc.nextLine();
	
	System.out.print("enter customer bill : ");
	double bill = sc.nextDouble();
	
	String Details=Customer.getCustomerDetails(id,name,bill);
	System.out.println(Details);
}
}
===================================================================================================================
OUTPUT:
======
enter customer id : 101
enter customer name : tharun
enter customer bill : 5000
[ Id is : 101, Name is :tharun, Bill is :5000.0]
===================================================================================================================


1Ô∏è‚É£ Method Definition

In Customer.java

public static String getCustomerDetails(int Costid, String Costname, double Costbill)


Here,
Costid, Costname, and Costbill are parameters (sometimes called formal parameters).
They are placeholders ‚Äî variables that will receive values when the method is called.

2Ô∏è‚É£ Method Call

In Test.java

String Details = Customer.getCustomerDetails(id, name, bill);


Here,
id, name, and bill are arguments (sometimes called actual parameters).
These are the real values you input from the keyboard using the Scanner.

üí° How Java connects them

When you call:

Customer.getCustomerDetails(id, name, bill);


üëâ Java copies the values of your arguments (id, name, bill)
into the method‚Äôs parameters (Costid, Costname, Costbill).

So it‚Äôs like doing this behind the scenes:

In Test.java	In Customer.java (after method call)
id = 101	Costid = 101
name = "Arjun"	Costname = "Arjun"
bill = 5000.75	Costbill = 5000.75

After copying, the method uses its own parameter variables (Costid, Costname, Costbill) inside the method body ‚Äî they hold the same data, but they‚Äôre separate variables.

üì¶ Analogy

Think of it like passing copies of data:

You (the caller) fill out a form (id, name, bill) and give it to the Customer method.
The method receives its own copy of those values (Costid, Costname, Costbill) to work with.
Changing one doesn‚Äôt affect the other.

üß† Summary
Term	Example	Meaning
Parameter	Costid, Costname, Costbill	Variable names inside the method definition
Argument	id, name, bill	Real values you pass when calling the method
What happens	Values from arguments are copied into parameters	Data flow direction: ‚Üí Method
===========================================================================================================================================================
===========================================================================================================================================================


===========================================================================================================================================================
===========================================================================================================================================================
===========================================================================================================================================================
===========================================================================================================================================================
===========================================================================================================================================================
